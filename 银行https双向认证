银行https双向认证

OpenSSL项目是一个协作开发一个健壮的，商业级的，全功能的，并且开放源代码工具包，它实现了安全套接字层(SSL v2/v3)和传输层安全(TLS v1)协议以及全强大的通用加密库。

浏览器会要求选择client证书。这个步骤是通过双向认证访问网站时必须的，但是平时访问银行、支付宝的时候貌似没有，这是因为这些网站为了简化用户的操作，都会要求用户安装什么“安全控件”，控件自动选择了证书 

--------------------------------------
创建CA（Certificate Authority） 

这个CA，也叫“根证书” 

服务端做了一个证书，但是这是没有法律效力的，谁都可以自己做证书，就根本达不到安全的目的。所以就要有一个机构，负责来确认服务端的身份，然后统一的签发证书。这样才能有权威性 

当浏览器通过HTTPS协议访问一个网站，网站首先会发过来一个自己的证书（certificate）。接下来浏览器就会到权威机构（CA），去验证一下这个证书是不是它签发的。如果是的话，就信任这个网站的证书，继续访问;如果不是的话，要怎么处理就依赖于实现了。一般的浏览器会弹出一个警告，让用户自己决定要不要继续访问。当然直接拒绝也是可以的 

现在国际上有3大CA机构，如果是要自己做一个网站的话，如上所述，一般是需要请这些权威机构帮忙签发证书的。现在所有的主流浏览器，默认都安装了这些CA的根证书，所以如果网站的证书是这些权威机构签发的，浏览器就不会发出警告了。比如支付宝，它的证书是由VeriSign签发的，所以访问支付宝，浏览器不会发出警告 

SSl证书 信任链 次级根证书


这里还有一个链条的关系，比如我有10个子网站，如果每个都要去找CA签发证书，就很麻烦。我可以找CA给我签发一个次级根证书，然后再用这个次级根证书给自己签发10个证书。那么只要客户的浏览器里有CA根证书就可以了，这10个证书都可以通过认证，不要求客户安装次级根证书，原文见下：
Intermediate CA certificates lie between the root CA certificate (which is installed in the browsers) and the server certificate (which you installed on the server).

如果是企业应用，那完全可以自己给自己当CA，因为可以要求目标用户（系统）安装自己的CA根证书，效果是一样的，还可以省下请权威CA签发证书的费用（互联网应用分发自己的CA到无数的互联网用户上，难度很大

-----------体验 https ssl建立连接(安全套接字层(SSL v2/v3)和传输层安全(TLS v1)协议 以前我们只关注tcp协议)的过程---------
下面就介绍如何创建自己的CA 

1、准备工作 

先在随便一个目录，创建以下几个子目录： 
/private 
/certificates 

其中private放的是私钥和CSR（后面会介绍），certificates里放的就是证书了 

2、创建CA私钥 
Openssl代码
openssl genrsa -aes256 -out private/ca.key.pem 2048   
最后的参数是RSA密钥的长度，默认是512。2048其实长了一点，老的浏览器稍后会不支持，不过现在的主流浏览器都是支持的，所以问题不大 

通过这个命令，私钥就创建好了，文件名是ca.key.pem 

用这个命令，可以看一下刚才创建的这个私钥的信息 
Openssl代码
openssl rsa -noout -text -in private/ca.key.pem  


不过基本上，看也是白看，反正我是看不懂。只知道私钥里其实有2组数字，是用来形成公钥的，最后也会包含在证书里 
A private key contains a series of numbers. Two of these numbers form the "public key", the others are part of the "private key". The "public key" bits are included when you generate a CSR, and subsequently form part of the associated Certificate. 

另外，最后的.pem扩展名，是表示该私钥用PEM编码。实际上私钥和证书都是用PEM编码的，PEM只是一种编码格式，不需要太在意。httpd可以直接处理这种编码格式，但是浏览器和JAVA都不行，所以在需要的时候，会把编码从PEM改成PKCS，后面会介绍。只要知道证书和私钥都有编码，只是编码是PEM还是PKCS的区别而已。就像"你好"可以用UTF-8编码，也可以用GBK编码一样，内容是不变的 


3、创建CA签名请求 
Openssl代码
openssl req -new -key private/ca.key.pem -out private/ca.csr -subj "/C=CN/ST=SZ/L=SZ/O=kyfxbl/OU=kyfxbl/CN=*.kyfxbl.net"
这里要注意的是，如果不用-subj参数，那么就会在命令行交互输入签发目标的身份识别信息，这叫DN（Distinguished Name）。其中别的都不要紧，最重要的是CN那一行，因为我这里是根证书，所以我设置为*.kyfxbl.net，这样我后面用这个CA签发的www.kyfxbl.net、game.kyfxbl.net、news.kyfxbl.net……，全都是有效的

生成的签名请求文件，是ca.csr 

Openssl代码
openssl req -noout -text -in private/ca.csr

同上，看不懂 


4、自己签发CA根证书 

Openssl代码
openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey private/ca.key.pem -in private/ca.csr -out certificates/ca.cer

这里参数很复杂，我也不太清楚准确的意思是什么，可以用openssl x509 -help自己研究一下 

生成的ca.cer，就是最终的根证书了！这个文件非常重要，因为后续的服务端证书、客户端证书，都是用这个CA签发的，也要把它分发给客户，让他们导入到自己的浏览器或者系统中 
查看的命令是：
openssl x509 -noout -text -in certificates/ca.cer  

5、把根证书从PEM编码转为PKCS编码 

这步其实不是必选的，但是前面说过，JAVA环境是不能直接用PEM编码的证书的，很多浏览器也不行，所以有时候也需要转一下编码 

得到的ca.p12就是转码后的CA根证书，在不能直接用ca.cer的时候，就用ca.p12代替 
openssl pkcs12 -export -cacerts -inkey private/ca.key.pem -in certificates/ca.cer -out certificates/ca.p12  

六、签发服务端证书 

现在CA根证书和私钥都有了，就可以开始签发服务端证书了（签发请求ca.csr是过程文件，有了cer就不再需要它了，要删掉也可以）。下面的命令和签发CA证书时都差不多，但是参数上有区别 

1、创建服务端私钥 

Openssl代码

openssl genrsa -aes256 -out private/server.key.pem 2048 

2、创建服务端证书签发请求 

Openssl代码

openssl req -new -key private/server.key.pem -out private/server.csr -subj "/C=CN/ST=SZ/L=SZ/O=kyfxbl/OU=kyfxbl/CN=www.kyfxbl.net"  


和ca.csr的区别在于，这里的CN不是*.kyfxbl.net，而是www.kyfxbl.net，因为我现在是在为www.kyfxbl.net申请证书 

3、利用CA根证书，签发服务端证书 

这里和前面自己签发CA证书时，参数区别就比较大了，最后得到的server.cer，就是服务端证书

七、测试单向认证 


接下来用https://localhost:443来访问，浏览器报警： 
这里就是前面创建CSR时，输入的CN的作用，这个证书是为www.kyfxbl.net申请的，这里请求的地址却是localhost，不匹配所以报错。为了能用www.kyfxbl.net这个主机名来访问，就需要改一下/etc/hosts文件： 

127.0.0.1       localhost 
192.168.1.102   www.kyfxbl.net 

然后就可以用www.kyfxbl.net来访问了，再试一下：https://www.kyfxbl.net/ 

这次浏览器还是告警，但是告警信息变了： 

可以看到这个证书是由*.kyfxbl.net这个CA颁发的，浏览器不认识，所以不信任由这个CA签发的所有证书。接下来就需要把ca.cer导入浏览器。这里直接导入server.cer也是可以的，但是后面如果又创建一个网站比如说www2.kyfxbl.net，那么又不行了。所以最好的办法是直接导入CA根证书，那么后续只要是用这个根证书签发的证书，浏览器都会信任 


八、配置双向认证 

如果要配置服务器只允许合法的用户访问，就需要配置双向认证 

配置为双向认证之后，除了服务端要发证书给客户端之外，客户端也要发客户端证书到服务端，服务端认证通过，才允许访问 

在单项认证的基础上，再配置以上3个参数 

SSLCACertificateFile，这个意思是当客户端发来客户端证书的时候，httpd用哪个CA根证书校验它 

配置好了，还不能重启，因为现在客户端证书还没做好 

这里要说明一下，客户端证书是怎么来的 

有2种方式： 

第一种，客户端也自己CA，然后签发证书给自己。把客户端的CA根证书发过来，配置成SSLCACertificateFile。这在互联网应用里基本是不可能的，安全和管理都是问题。但是在企业应用里，还是比较常见的，双方互相交换CA根证书 

第二种，就用刚才服务端的CA根证书，签发一个客户端证书，发给用户，用户每次用这个证书来发请求，像银行，支付宝等等，用的是这种方式 

当然理论上其实还有一种办法，就是客户自己去找权威CA签证书，但是这个是不可能的，因为很麻烦，找CA签也非常贵 

本文用的是第2种方法。其实都是一样的。关键还是在CA根证书上，所以前面也说过了，CA根证书非常重要 


九、签发客户端证书 

1、创建客户端私钥 
Openssl代码
openssl genrsa -aes256 -out private/client.key.pem 2048

2、创建客户端证书签发请求 
Openssl代码
openssl req -new -key private/client.key.pem -out private/client.csr -subj "/C=CN/ST=SZ/L=SZ/O=kyfxbl/OU=kyfxbl/CN=kyfxbl"

这里的不同在于，这里的CN不是*.kyfxbl.net，也不是www.kyfxbl.net，随便填一个kyfxbl就好了，或者干脆叫user都没问题，反正是一个客户端证书 

3、利用CA根证书，签发客户端证书
openssl x509 -req -days 3650 -sha1 -extensions v3_req -CA certificates/ca.cer -CAkey private/ca.key.pem -CAserial ca.srl -CAcreateserial -in private/client.csr -out certificates/client.cer  
这里和签发server.cer基本是一样的


4、把客户端证书转换成p12格式

openssl pkcs12 -export -clcerts -inkey private/client.key.pem -in certificates/client.cer -out certificates/client.p12 
这步是必须的，因为稍后就需要把客户端证书导入到浏览器里，但是一般浏览器都不能直接使用PEM编码的证书 



十、测试双向认证 















